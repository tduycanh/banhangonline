//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSys.Model.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BooksEntities : DbContext
    {
        public BooksEntities()
            : base("name=BooksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Debt> Debts { get; set; }
        public virtual DbSet<DebtDetail> DebtDetails { get; set; }
        public virtual DbSet<DefaultData> DefaultDatas { get; set; }
        public virtual DbSet<Introduction> Introductions { get; set; }
        public virtual DbSet<MadeIn> MadeIns { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Poster> Posters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<SlideShow> SlideShows { get; set; }
        public virtual DbSet<SpOnline> SpOnlines { get; set; }
        public virtual DbSet<System_config> System_config { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
    
        public virtual int GetHoatDong(Nullable<int> page, Nullable<int> top, string danhmuc)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var danhmucParameter = danhmuc != null ?
                new ObjectParameter("danhmuc", danhmuc) :
                new ObjectParameter("danhmuc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHoatDong", pageParameter, topParameter, danhmucParameter);
        }
    
        public virtual int GetHoatDongMoi(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHoatDongMoi", topParameter);
        }
    
        public virtual int GetHoTroTrucTuyen(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHoTroTrucTuyen", topParameter);
        }
    
        public virtual ObjectResult<GetProductHot_Result> GetProductHot(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductHot_Result>("GetProductHot", topParameter);
        }
    
        public virtual ObjectResult<GetProductNew_Result> GetProductNew(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductNew_Result>("GetProductNew", topParameter);
        }
    
        public virtual int GetSanPham(Nullable<int> page, Nullable<int> top, string danhmuc)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var danhmucParameter = danhmuc != null ?
                new ObjectParameter("danhmuc", danhmuc) :
                new ObjectParameter("danhmuc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSanPham", pageParameter, topParameter, danhmucParameter);
        }
    
        public virtual ObjectResult<GetSanphamHot_Result> GetSanphamHot(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSanphamHot_Result>("GetSanphamHot", topParameter);
        }
    
        public virtual int GetSanPhamMoi(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSanPhamMoi", topParameter);
        }
    
        public virtual int GetTinTuc(Nullable<int> page, Nullable<int> top, string danhmuc)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var danhmucParameter = danhmuc != null ?
                new ObjectParameter("danhmuc", danhmuc) :
                new ObjectParameter("danhmuc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTinTuc", pageParameter, topParameter, danhmucParameter);
        }
    
        public virtual int GetTinTucMoi(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTinTucMoi", topParameter);
        }
    
        public virtual int sprocCategoriesSingleItem(Nullable<long> memID, string name, string url, Nullable<int> oder, Nullable<int> parent, Nullable<int> type, ObjectParameter memIDOUT)
        {
            var memIDParameter = memID.HasValue ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var oderParameter = oder.HasValue ?
                new ObjectParameter("oder", oder) :
                new ObjectParameter("oder", typeof(int));
    
            var parentParameter = parent.HasValue ?
                new ObjectParameter("parent", parent) :
                new ObjectParameter("parent", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocCategoriesSingleItem", memIDParameter, nameParameter, urlParameter, oderParameter, parentParameter, typeParameter, memIDOUT);
        }
    
        public virtual int sprocProductSingleItem(Nullable<long> memID, Nullable<long> product_id, string product_name, Nullable<int> categories, Nullable<decimal> price_import, Nullable<decimal> price_export, Nullable<decimal> wholesale_price, Nullable<int> price_percent, Nullable<int> quantity_import, Nullable<int> quantity_export, ObjectParameter memIDOUT)
        {
            var memIDParameter = memID.HasValue ?
                new ObjectParameter("MemID", memID) :
                new ObjectParameter("MemID", typeof(long));
    
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(long));
    
            var product_nameParameter = product_name != null ?
                new ObjectParameter("product_name", product_name) :
                new ObjectParameter("product_name", typeof(string));
    
            var categoriesParameter = categories.HasValue ?
                new ObjectParameter("categories", categories) :
                new ObjectParameter("categories", typeof(int));
    
            var price_importParameter = price_import.HasValue ?
                new ObjectParameter("price_import", price_import) :
                new ObjectParameter("price_import", typeof(decimal));
    
            var price_exportParameter = price_export.HasValue ?
                new ObjectParameter("price_export", price_export) :
                new ObjectParameter("price_export", typeof(decimal));
    
            var wholesale_priceParameter = wholesale_price.HasValue ?
                new ObjectParameter("wholesale_price", wholesale_price) :
                new ObjectParameter("wholesale_price", typeof(decimal));
    
            var price_percentParameter = price_percent.HasValue ?
                new ObjectParameter("price_percent", price_percent) :
                new ObjectParameter("price_percent", typeof(int));
    
            var quantity_importParameter = quantity_import.HasValue ?
                new ObjectParameter("quantity_import", quantity_import) :
                new ObjectParameter("quantity_import", typeof(int));
    
            var quantity_exportParameter = quantity_export.HasValue ?
                new ObjectParameter("quantity_export", quantity_export) :
                new ObjectParameter("quantity_export", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sprocProductSingleItem", memIDParameter, product_idParameter, product_nameParameter, categoriesParameter, price_importParameter, price_exportParameter, wholesale_priceParameter, price_percentParameter, quantity_importParameter, quantity_exportParameter, memIDOUT);
        }
    
        public virtual int TimSanPham(Nullable<int> page, Nullable<int> top, string id)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimSanPham", pageParameter, topParameter, idParameter);
        }
    
        public virtual int TimTinTuc(Nullable<int> page, Nullable<int> top, string id)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TimTinTuc", pageParameter, topParameter, idParameter);
        }
    }
}
